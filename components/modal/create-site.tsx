"use client";

import { toast } from "sonner";
import { createSite } from "@/lib/actions";
import { useRouter } from "next/navigation";
import { useFormStatus } from "react-dom";
import { cn } from "@/lib/utils";
import LoadingDots from "@/components/icons/loading-dots";
import { useModal } from "./provider";
import va from "@vercel/analytics";
import React, { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import {
    Card,
    CardContent,
    CardDescription,
    CardFooter,
    CardHeader,
    CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import axios from "axios";
import { GetDatabaseResponse } from "@/app/api/notion/[database_id]/route";
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from "@/components/ui/select";
import { Separator } from "@/components/ui/separator";
import { useSession } from "next-auth/react";

type FieldMapping = {
    name: string;
    description: string;
    type?: string;
}[];

const fieldMappings = [
    {
        name: "Title",
        description: "The title of the post",
        type: "mandatory",
    },
    {
        name: "Published Date",
        description: "The date when the post will be published",
        type: "mandatory",
    },
    {
        name: "Slug",
        description:
            "Slug for the post, or autogenerated from title if left empty",
    },
    {
        name: "Draft",
        description: "Indicates if the post is a draft or ready to be posted",
    },
    {
        name: "Featured",
        description: "Indicates if the post is featured on the first page",
    },
];

const initialState = {};
fieldMappings.forEach((field) => {
    //@ts-ignore
    initialState[field.name] = null;
});

type MappingType = {
    draft: string;
    featured: string;
    publishedDate: string;
    slug: string;
    title: string;
} | null;

export type FormDataType = {
    name: string;
    description: string;
    subdomain: string;
    mapping: MappingType;
    postsDatabaseId: string;
} | null;

export default function CreateSiteModal() {
    const router = useRouter();
    const modal = useModal();
    const { data: session, status } = useSession();
    //   const { pending } = useFormStatus();
    const [pending, setPending] = useState(false);

    const [isValidatingMapping, setIsValidatingMapping] = useState(false);
    const [userMapping, setUserMapping] = useState<MappingType>(null);
    const [isValidatingSubdomain, setIsValidatingSubdomain] = useState(false);
    const [blogName, setBlogName] = useState("");
    const [subdomainName, setSubdomainName] = useState("");
    const [step, setStep] = useState(1);
    const [notionDatabaseId, setNotionDatabaseId] = useState("");
    const [isConnecting, setIsConnecting] = useState(false);
    const [databaseConnected, setDatabaseConnected] = useState(false);
    const [databaseInfo, setDatabaseInfo] = useState({});
    const [mapping, setMapping] = useState(initialState);
    const [isMappingValid, setIsMappingValid] = useState(false);
    const [isSavingMapping, setIsSavingMapping] = useState(false);

    const [data, setData] = useState<FormDataType>({
        name: "",
        subdomain: "",
        description: "",
        mapping: null,
        postsDatabaseId: "",
    });

    useEffect(() => {
        //@ts-ignore
        setData((prev) => ({
            ...prev,
            subdomain: prev?.name
                .toLowerCase()
                .trim()
                .replace(/[\W_]+/g, "-"),
        }));
    }, [data?.name]);

    const extractIdFromUrl = (url: string): string => {
        const pattern = /([a-fA-F0-9]{32})/;
        const match = url.match(pattern);
        if (match) {
            return match[1];
        } else {
            return "";
        }
    };

    const connectNotionDatabase = async () => {
        setIsConnecting(true);
        axios
            .get<GetDatabaseResponse>(
                `/api/notion/${extractIdFromUrl(notionDatabaseId)}`,
            )
            .then((response: any) => {
                console.log(response);
                setDatabaseConnected(true);
                setStep(2);
                setDatabaseInfo(response?.data?.databaseInfo);
            })
            .catch((error) => {
                console.log(error);
            })
            .finally(() => {
                setIsConnecting(false);
            });

        setDatabaseConnected(true);
        setStep(2);
        setDatabaseInfo({
            object: "database",
            id: "c668b7ee-d8e6-4b06-a0ca-efa1bbc22101",
            cover: null,
            icon: null,
            created_time: "2024-03-31T17:37:00.000Z",
            created_by: {
                object: "user",
                id: "e8286ec6-332d-4f64-a39f-ed9092ec84e3",
            },
            last_edited_by: {
                object: "user",
                id: "e8286ec6-332d-4f64-a39f-ed9092ec84e3",
            },
            last_edited_time: "2024-04-10T18:36:00.000Z",
            title: [
                {
                    type: "text",
                    text: {
                        content: "Content",
                        link: null,
                    },
                    annotations: {
                        bold: false,
                        italic: false,
                        strikethrough: false,
                        underline: false,
                        code: false,
                        color: "default",
                    },
                    plain_text: "Content",
                    href: null,
                },
            ],
            description: [],
            is_inline: false,
            properties: {
                Featured: {
                    id: "GRLB",
                    name: "Featured",
                    type: "checkbox",
                    checkbox: {},
                },
                "Publish Date": {
                    id: "JS%5E%3D",
                    name: "Publish Date",
                    type: "date",
                    date: {},
                },
                Slug: {
                    id: "ZsSw",
                    name: "Slug",
                    type: "rich_text",
                    rich_text: {},
                },
                Draft: {
                    id: "%60_%3Co",
                    name: "Draft",
                    type: "checkbox",
                    checkbox: {},
                },
                Name: {
                    id: "title",
                    name: "Name",
                    type: "title",
                    title: {},
                },
            },
            parent: {
                type: "workspace",
                workspace: true,
            },
            url: "https://www.notion.so/c668b7eed8e64b06a0caefa1bbc22101",
            public_url: null,
            archived: false,
            in_trash: false,
            request_id: "9490728c-440c-4892-bbf4-788348b7a147",
        });
        setIsConnecting(false);
    };

    useEffect(() => {
        if ((databaseInfo as any)?.properties) {
            const automaticMapping = extractMapping(
                (databaseInfo as any)?.properties,
            );
            setMapping(automaticMapping);
        }
    }, [databaseInfo]);

    const handleDatabaseIdChange = (e: any) => {
        setNotionDatabaseId(e.target.value);
        // @ts-ignore
        setData({ ...data, postsDatabaseId: e.target.value });
    };

    const extractOptions = (columnName: string) => {
        try {
            //@ts-ignore
            return Object.keys(databaseInfo?.properties).map((key) => (
                <SelectItem value={key} key={key}>
                    {key}
                </SelectItem>
            ));
        } catch (error) {
            return null;
        }
    };

    const extractMapping = (notionDatabaseProperties: any) => {
        const _mapping: { [key: string]: string } = {};

        fieldMappings.forEach((field) => {
            const possibleFieldNames = getPossibleFieldNames(field.name);
            const notionPropertyName = Object.keys(
                notionDatabaseProperties,
            ).find((propertyName) => possibleFieldNames.includes(propertyName));
            if (notionPropertyName) {
                _mapping[field.name] = notionPropertyName;
            } else {
                console.log(
                    `No matching property found for field "${field.name}"`,
                );
            }
        });

        return _mapping;
    };

    const getPossibleFieldNames = (fieldName: string): string[] => {
        switch (fieldName) {
            case "Title":
                return [
                    "Name",
                    "Article name",
                    "Blog title",
                    "Title",
                    "Post title",
                    "Heading",
                ];
            case "Published Date":
                return [
                    "Published Date",
                    "Publish Date",
                    "Date",
                    "Release Date",
                ];
            case "Slug":
                return ["Slug", "URL Slug", "Post Slug"];
            case "Draft":
                return ["Draft", "Is Draft", "Draft Status"];
            case "Featured":
                return ["Featured", "Is Featured", "Featured Post"];
            default:
                return [fieldName]; // Default to the original field name
        }
    };

    useEffect(() => {
        if (databaseConnected) {
            const areMappingsValid = checkValidMappings(mapping);
            setIsMappingValid(areMappingsValid);
        }
    }, [mapping, databaseConnected]);

    const checkValidMappings = (_mapping: any) => {
        let isValid = true;
        fieldMappings.map((mp) => {
            if (mp.type === "mandatory" && !_mapping[mp.name]) {
                isValid = false;
            }
        });
        return isValid;
    };

    const handleChangeMapping = (value: string, column: string) => {
        if (value) {
            // @ts-ignore
            setMapping((prev) => ({ ...prev, [column]: value }));
        }
    };

    const saveMapping = () => {
        setIsSavingMapping(true);

        const userMappings: MappingType = {
            draft: (mapping as any)["Draft"],
            featured: (mapping as any)["Featured"],
            publishedDate: (mapping as any)["Published Date"],
            slug: (mapping as any)["Slug"],
            title: (mapping as any)["Title"],
        };

        //@ts-ignore
        setData({ ...data, mapping: userMappings });
        setStep(3);
        setIsValidatingMapping(false);
    };

    const createBlog = async () => {
        setPending(true);
        console.log(data);
        createSite(data as any).then((res: any) => {
            if (res.error) {
                toast.error(res.error);
            } else {
                va.track("Created Site");
                const { id } = res;
                router.refresh();
                router.push(`/site/${id}`);
                modal?.hide();
                toast.success(`Successfully created site!`);
            }
        });
        setPending(false);
    };

    return (
        <Card>
            <CardHeader>
                {step == 1 && (
                    <>
                        <CardTitle>Connect your Notion database</CardTitle>
                        <CardDescription>
                            Enter your database URL below:
                        </CardDescription>
                    </>
                )}
                {step == 2 && (
                    <>
                        <CardTitle>Map your fields</CardTitle>
                        {/* <CardDescription>Enter your database URL below:</CardDescription> */}
                    </>
                )}
                {step == 3 && (
                    <>
                        <CardTitle>Choose your subdomain</CardTitle>
                        <CardDescription>
                            You can change this later.
                        </CardDescription>
                    </>
                )}
            </CardHeader>
            <CardContent>
                <form className="grid w-full items-center gap-4">
                    {step == 1 && (
                        <div className="flex flex-col space-y-1.5">
                            <Label htmlFor="databaseId">Database Id</Label>
                            <Input
                                id="databaseId"
                                placeholder="c668b7eed8e64b06a0caefa1bbc22101"
                                onChange={handleDatabaseIdChange}
                            />
                        </div>
                    )}

                    {step == 2 && (
                        <>
                            {fieldMappings.map((field, index) => (
                                <React.Fragment key={index}>
                                    {index == 0 && (
                                        <>
                                            <p
                                                style={{
                                                    fontWeight: 600,
                                                    fontSize: "15px",
                                                    marginTop: "20px",
                                                }}
                                            >
                                                This are mandatory fields
                                            </p>

                                            <Separator />
                                        </>
                                    )}
                                    {index == 2 && (
                                        <>
                                            <p
                                                style={{
                                                    fontWeight: 600,
                                                    fontSize: "15px",
                                                    marginTop: "20px",
                                                }}
                                            >
                                                This are nice to have
                                            </p>

                                            <Separator />
                                        </>
                                    )}
                                    <div
                                        className={"flex flex-row gap-3"}
                                        key={field.name}
                                    >
                                        <div style={{ width: "260px" }}>
                                            <div
                                                style={{
                                                    fontWeight: 500,
                                                    fontSize: "15px",
                                                }}
                                            >
                                                {field.name}
                                            </div>
                                            <div
                                                style={{
                                                    fontSize: "12px",
                                                    fontWeight: 300,
                                                }}
                                            >
                                                {field.description}{" "}
                                                {field.type === "mandatory" &&
                                                    "*"}
                                            </div>
                                        </div>
                                        <div style={{ width: "150px" }}>
                                            <div className="flex flex-col space-y-1.5">
                                                <Select
                                                    value={
                                                        //@ts-ignore
                                                        mapping[field.name]
                                                    }
                                                    onValueChange={(value) =>
                                                        handleChangeMapping(
                                                            value,
                                                            field.name,
                                                        )
                                                    }
                                                >
                                                    <SelectTrigger
                                                        id={field.name}
                                                    >
                                                        <SelectValue placeholder="Notion field name" />
                                                    </SelectTrigger>
                                                    <SelectContent position="popper">
                                                        {extractOptions(
                                                            field.name,
                                                        )}
                                                    </SelectContent>
                                                </Select>
                                            </div>
                                        </div>
                                    </div>
                                </React.Fragment>
                            ))}
                            {databaseConnected && !isMappingValid && (
                                <span
                                    style={{
                                        fontSize: "13px",
                                        fontWeight: 400,
                                        color: "red",
                                    }}
                                >
                                    Please select correct mapping for mandatory
                                    fields
                                </span>
                            )}
                        </>
                    )}

                    {step == 3 && (
                        <>
                            <div className="flex flex-col space-y-1.5">
                                <Label htmlFor="name">
                                    Enter your blog's name
                                </Label>
                                <Input
                                    id="name"
                                    name="name"
                                    type="text"
                                    autoFocus
                                    value={data?.name}
                                    //@ts-ignore
                                    onChange={(e) =>
                                        setData({
                                            ...data,
                                            name: e.target.value,
                                        })
                                    }
                                    maxLength={32}
                                    required
                                    placeholder="My Awesome Blog"
                                />
                            </div>

                            <div className="flex flex-col space-y-2">
                                <Label htmlFor="name">
                                    Enter your desired subdomain
                                </Label>
                                <div className="flex w-full max-w-md">
                                    <Input
                                        id="subdomain"
                                        name="subdomain"
                                        type="text"
                                        autoFocus
                                        value={data?.subdomain}
                                        onChange={(e) =>
                                            //@ts-ignore
                                            setData({
                                                ...data,
                                                subdomain: e.target.value,
                                            })
                                        }
                                        maxLength={32}
                                        required
                                        placeholder="my-personal-blog"
                                        autoCapitalize="off"
                                        pattern="[a-zA-Z0-9\-]+" // only allow lowercase letters, numbers, and dashes
                                        className="rounded-e-none"
                                    />

                                    <div className="flex items-center rounded-r-lg border border-l-0 border-stone-200 bg-stone-100 px-3 text-sm dark:border-stone-600 dark:bg-stone-800 dark:text-stone-400">
                                        .{process.env.NEXT_PUBLIC_ROOT_DOMAIN}
                                    </div>
                                </div>
                            </div>
                        </>
                    )}
                </form>
            </CardContent>
            <CardFooter>
                {step == 1 && (
                    <Button
                        className="w-full"
                        disabled={!notionDatabaseId}
                        onClick={connectNotionDatabase}
                    >
                        {isConnecting ? "Connecting..." : "Connect"}
                    </Button>
                )}

                {step == 2 && (
                    <Button
                        className="w-full"
                        disabled={!isMappingValid || isSavingMapping}
                        onClick={saveMapping}
                    >
                        {isConnecting ? "Saving..." : "Next"}
                    </Button>
                )}

                {step == 3 && (
                    <Button
                        className="w-full"
                        disabled={pending}
                        onClick={createBlog}
                    >
                        {pending ? (
                            <LoadingDots color="#808080" />
                        ) : (
                            <p>Create</p>
                        )}
                    </Button>
                )}
            </CardFooter>
        </Card>
    );
}
